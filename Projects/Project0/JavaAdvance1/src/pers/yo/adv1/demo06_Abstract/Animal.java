package pers.yo.adv1.demo06_Abstract;

/* 抽象类：抽象方法所在的，格式：在class前加abstract关键字即可
* 抽象方法：在返回值类型前 加abstract关键字，去掉花括号(函数体)，直接分号结尾
*
* 抽象类和抽象方法的使用
* 1.不能用 “new 抽象类名” 来直接创建实例对象
* 2.必须用一个子类来继承抽象父类！
* 3.此子类必须【重写(覆盖)】 抽象父类中 【所有的抽象方法】！
*
* 重写(覆盖)：子类拿到父类抽象方法——
* 【子类方法名】与【父类抽象方法名】相同且【参数(形参)列表相同】，
* 去掉abstract关键字，然后此子类方法补上具体实现：方法体
*
* 4.由此子类创建子类的实例对象 进行使用
*
*
* 抽象类的注：
* 1.不能用 “new 抽象类名” 来直接创建实例对象
* 2.抽象类中可以有构造方法——是供子类创建实例对象时，初始化父类成员使用的
* 3.抽象类中，不一定包含抽象方法——目的是不想让调用者创建该类对象，在某些特殊场景下有用。(如设计模式中的 适配器模式)
* 但有抽象方法的类必定是抽象类
*
* 4.抽象类的子类必须【重写(覆盖)】 抽象父类中 【所有的抽象方法】！
* 若抽象类的子类 也是抽象类，那么 第4 就不是必须满足的。
*  */


public abstract class Animal {

    //这是一个抽象方法，表示吃东西。但具体吃什么(花括号内的函数体)不确定
    public abstract void eat();
}
