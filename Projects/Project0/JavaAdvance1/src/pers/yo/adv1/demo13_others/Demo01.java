package pers.yo.adv1.demo13_others;

/* 数据结构
*
* 链表：
* 1.查询慢：链表中地址不是连续的，每次查询元素，都必须从头开始查询
* 2.增删快：只需修改【连接下个元素的 地址】即可
*
* 链表中的每一个元素称之为节点
* 一个节点包含了 一个数据源(存储数组)，两个指针域(存储地址)
*
* 单向链表：链表中只有一条链子，不能保证元素的顺序(存储元素和取出元素的顺序有可能不一致)
* 双向链表：链表中有两条链子，有一条链子是专门记录元素的顺序，是一个有序的集合
*
*
* ------------------------------------------
* 红黑树 (Red-Black Tree，简称 R-B Tree)，它一种特殊的二叉查找树。
趋近于平衡树，查询速度非常快。

红黑树是特殊的二叉查找树，意味着它满足二叉查找树的特征：任意一个节点所包含的键值，大于等于左孩子的键值，小于等于右孩子的键值。
除了具备该特性之外，红黑树还包括许多额外的信息。

红黑树的每个节点上都有存储位表示节点的颜色，颜色是红 (Red) 或黑 (Black)。
红黑树的特性:
(1) 每个节点或者是黑色，或者是红色。
(2) 根节点是黑色。
(3) 每个叶子节点(空节点)是黑色。 [注意：这里叶子节点，是指为空的叶子节点！]
(4) 如果一个节点是红色的，则它的子节点必须是黑色的。
(5) 任意一个节点A到其(节点A)的每一个叶子节点 的所有路径上 黑色节点数相同 ——确保没有一条路径会比其他路径长出俩倍。因而，红黑树是相对是接近平衡的二叉树

关于它的特性，需要注意的是：
第一，特性 (3) 中的叶子节点，是只为空 (NIL 或 null) 的节点。
第二，特性 (5)，确保没有一条路径会比其他路径长出俩倍。因而，红黑树是相对是接近平衡的二叉树。

*  */


public class Demo01 {
    public static void main(String[] args) {

    }
}
