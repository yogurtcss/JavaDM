package pers.yo.adv1.demo07_Interface;

/* ITF 即 interface (InTerFace) 重读音处的首字母大写，我自定义的缩写而已
* ITF_abs 全称为 interface abstract 接口-含抽象方法的
*  */


/* 【开局第一条】接口没有静态代码块，也没有构造方法！！
* 接口没有静态代码块，也没有构造方法！！接口没有静态代码块，也没有构造方法！！
*
* 在任何版本的Java中，接口都能定义抽象方法
* 格式：
* public abstract 返回值类型 方法名(参数列表);
*
* 注：1.接口中的抽象方法，打头的修饰符必须是两个固定的关键字：public abstract
* 2.这两个固定的关键字：public abstract可以选择性地省略；刚学，建议不省略
*
* -----------------------------------------------------------------------------------------
* 从Java 8开始，接口内允许定义默认方法——解决 接口升级 的问题
* 【接口升级】 如 欲向原接口中新增抽象方法A，
* 但因为其实现类必须重写所有接口的抽象方法，每个实现的子类都要挨个新增实现抽象方法A，太麻烦了！
* 默认方法可解决此问题。向原接口中新增默认方法A，可使得 实现此接口的所有子类，都具有此默认方法，而不用新增修改了！！
*
*
* 默认方法：接口可以有实现方法，而且不需要实现类去实现的方法
*
* 抽象方法，接口的实现类(子类)需要实现
* 默认方法，接口的实现类(子类)不需要实现，可以直接使用，也可以拿来【重写】之
* 可以定义一个或多个默认方法
*
* 接口中默认方法 格式
* public default 返回值类型 方法名(参数列表){ //默认方法通过实例调用
*    ...//方法体
* }
*
* 注：1.若多个接口中存在重复的默认方法，则其实现类必须对 冲突的默认方法进行覆盖重写
* 2.一个子类的父类中的方法A，若与接口中的默认方法产生冲突，则优先使用父类中的方法A
*
* -----------------------------------------------------------------------------------------
* 接口中静态方法 格式
* public static 返回值类型 方法名(参数列表){ //静态方法只能通过接口名调用，【接口名.静态方法(参数)】。与类的静态方法 调用类似
*    ...//方法体
* }
*
*
* 默认方法与静态方法的区别
* 1、接口默认方法、静态方法可以有多个。
* 2、默认方法通过实例调用，静态方法只能通过接口名调用。
* 3、default 默认方法关键字只能用在接口中。
* 4、默认方法可以被继承，如果继承了多个接口，多个接口都定义了多个同样的默认方法，实现类需要重写默认方法不然会报错。
* 5、静态方法不能被继承及覆盖，所以只被具体所在的接口调用。
*
* -----------------------------------------------------------------------------------------
* Java9开始，允许定义私有方法(因为我用的家哇8.我跳喽)
*
*-----------------------------------------------------------------------------------------
* 接口的常量：必须使用 public static final 固定的三个关键字连用 进行修饰！！格式如下
* public static final 数据类型 常量名 = 数据值; //使用 接口名.常量 调用之
*
* 注：1.public static final可以选择性省略(省略其中一个、两个，全省略均可)
* 2.接口中的常量必须进行赋值；
* 3.接口中的常量名的命名规则：使用完全大写的英文字母，用下划线分隔
* 4.使用 接口名.常量 调用之
*
* 使用final关键字修饰的东西(变量、方法)，说明不可改变
* 接口的常量使用了final，说明是不可改变。
*
*-----------------------------------------------------------------------------------------
*
*
*  */

/* ITF 即 interface (InTerFace) 重读音处的首字母大写，我自定义的缩写而已
* ITF_abs 全称为 interface abstract 接口-含抽象方法的
*  */

public interface ITF_abs {
    //这是一个合法的抽象方法
    public abstract void methodAbs1();
//    //这也是合法的抽象方法
//    abstract void methodAbs2();
//    //这也是合法的抽象方法
//    public void methodAbs3();
//    //这也是合法的抽象方法
//    void methodAbs4();
}