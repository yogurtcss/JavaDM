package pers.yo.adv1.demo09_Final;

/* final关键字：表示最终的、不可改变的
*
* 1.final关键字修饰一个类时，格式为
* public final class 类名{  //final表示这个类不能有任何的子类，即【太监类】
*    //...
* }
*
* final修饰的这个类A不能被其他人继承，所以此(final修饰的这个)类A中所有的成员方法不能被覆盖重写
* 若final修饰的这个类A是另一个类B的子类，则此final 类A仍可重写类B的方法
* 人话：final A仍能继承父类B，但到了final A这里，香火就断了——因为A是太监
*
* ----------------------------------------------------------------
* 2.final关键字修饰一个方法时，格式为：
* 修饰符(如public)  final 返回值类型 方法名(参数){  //表示此方法是最终方法，即它不能被覆盖重写 【太监方法、断后方法】
*   //...
* }
*
* ▲对于类、方法来说，abstract关键字和final关键字不能同时使用，因为：他俩含义矛盾。
* abstract关键字：必须要被覆盖重写
* final关键字：不能被覆盖重写
*
* ----------------------------------------------------------------
* 3.final关键字修饰一个局部变量时，格式为：
* final 数据类型 变量名a = 数据; //表示此变量a不能被更改，【不可变】。  “一次赋值，终生不变”
*
* 对于基本数据类型，【不可变】就是 变量的值不可变
* 对于引用类型，【不可变】就是 变量中的地址值不可变
*
* ----------------------------------------------------------------
* 4.final关键字修饰一个成员变量时，格式为：
* final 数据类型 变量名a = 数据; //表示此变量a不能被更改，【不可变】。  “一次赋值，终生不变”
*
* 1.成员变量具有默认值。但用了final后(因为不可更改，所以系统也没法赋默认值，只好把更改权交给你，由你手动赋值喽)，系统不再给默认值了，必须手动赋值！
* 2.对于final的成员变量，要么直接手动赋值，要么通过构造方法赋值；
* 3.必须保证类中多有重载的构造方法，最终都会对final的成员变量赋值。
*  */


public class Demo01Final {
}
