package pers.yo.adv1.demo24_MethodReference;

/* Method reference 方法引用

一、概述
方法引用是 用来直接访问【已存在的类 或 已存在的实例 】的 已经存在的方法或者构造方法。

方法引用提供了一种引用而不执行方法的方式，它需要由【兼容的函数式接口】构成的目标类型上下文。
计算时，方法引用会创建函数式接口的一个实例。

▲ 规定
Consumer<String> consumer = System.out::println;
consumer.accept("This is Major Tom");
可以发现： Consumer接口中的抽象方法accept() 与 【在方法引用进来的println()】 的共同点：接口
都是接收一个参数类型为 String 参数，并且无返回值。

方法引用的规定，实现抽象方法的参数列表，必须与 方法引用【的方法】的参数列表保持一致！至于返回值就不作要求。
// lambda表达式中 传入的形参， 必须是 方法引用中 (被引进来的)那个方法 可以接收的类型，否则会抛出异常

▲ 作用
* 方法引用的唯一用途是支持 Lambda 的简写， 仅仅是 Lambda 的配套服务，
主要目的是通过名字来获得 Lambda，重复利用已有的方法。
* 方法引用提高了代码的可读性，也使逻辑更加清晰。(优点)

-----------------------------------------------------------------
二、格式
可能在一开始不太习惯“方法引用”的写法，
建议先写出 最原始的lambda表达式，
然后再思考 是否可用“方法引用” 改进之

* 使用:: 操作符将方法名和对象或类的名字分隔开。
  “ :: ” 是域操作符（也可以称作定界符、分隔符），示例如下

方法引用String::valueOf    等价的lambda表达式为 x->String.valueOf(x)
方法引用Object::toString   等价的lambda表达式为 x->Object.toString(x)
方法引用x::toString        等价的lambda表达式为 ()->x.toString()
方法引用ArrayList::new     等价的lambda表达式为 ()->new Array<>()

-----------------------------------------------------------------
三、格式的分类：
1.静态方法引用
2.实例方法引用
3.构造方法引用

-----------------------------------------------------------------
1.静态方法引用
类名 :: 静态方法名

注：静态方法引用比较容易理解，和静态方法调用相比，只是把 . 换为 ::
在目标类型兼容的任何地方，都可以使用静态方法引用

-----------------------------------------------------------------
2.实例方法引用
(1)实例上的 实例方法引用
实例名 :: 方法名

(2)在子类中：对 超类(父类)上的实例方法进行引用，
使用super关键字，在子类中可以引用“超类”中已有的方法
super关键字 :: 方法名

▲ 在本类中：引用本类的成员方法 (捕获this指针) ：
this关键字 :: equals   等价于lambda表达式 x->this.equals(x)

(3)类型上的实例方法引用
类名 :: 方法名

注：1.若类型的实例方法是【泛型】的，就需要在 :: 分隔符前【提供此泛型的类型参数】，
或者（多数情况下）利用目标类型推导出其类型。
2.静态方法引用和类型上的实例方法引用 拥有一样的语法。编译器会根据实际情况做出决定。
3.一般我们不需要指定方法引用中的参数类型，因为编译器往往可以推导出结果，
但如果需要我们也可以显式在 :: 分隔符之前 提供参数类型信息。

▲ 在泛型类或泛型方法中，也可以使用方法引用。
类名 :: <指定的泛型类型>方法名

当把泛型方法指定为方法引用时，【类型参数出现在 ::之后、方法名之前】。
但是，需要指出的是，在这种情况 (和其它许多情况) 下，并非必须显示指定类型参数，
因为类型参数会被自动推断得出。对于指定泛型类的情况，类型参数位于类名的后面：：的前面。

-----------------------------------------------------------------
3.构造方法引用
(1)构造方法引用(构造器引用)
类名 :: new
注：在引用构造器的时候，构造器参数列表要与接口中抽象方法的参数列表一致

(2)数组构造方法的引用
类型 [] :: new
// 其中类型可以为基本类型 也可以是类
注：引用数组和引用构造器很类似；

*  */

import pers.yo.adv1.demo24_MethodReference.Object1;
import pers.yo.adv1.demo24_MethodReference.Printable; //函数式接口
import pers.yo.adv1.demo24_MethodReference.Calcable;

public class Demo01_MethodRef {
    //定义一个方法，方法 参数是函数式接口
    public static void printStr( String str, Printable p ){
        p.print( str );
    }

    public static void printInt( int i, Calcable c ){
        System.out.println( c.calc(i) );
    }

    public static void main(String[] args) {
        Object1 obj1 = new Object1();
        printStr(
                "aa",
                //System.out::println
                obj1::printUpperCase
        );

        printInt(
                -1,
                i -> Math.abs(i)
                //Math::abs
        );



    }
}
