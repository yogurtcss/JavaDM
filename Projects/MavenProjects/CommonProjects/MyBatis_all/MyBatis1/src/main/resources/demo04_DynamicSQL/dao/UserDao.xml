<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 关于mapper的约束 -->

<!-- 2020-01-12 17:04:33
<?xml version="1.0" encoding="utf-8" standalone="no"?> 必需在xml文件的第一行！！
<?xml version="1.0" encoding="UTF-8"?>  必须是 XML 文件的第一个元素且前面不能空格。

xml文件中第一个元素前面不能为空！！！！！！！！！！！！
<?xml ... ?> 前面不能有空格！！
-->

<mapper namespace="demo04_DynamicSQL.dao.UserDao">
    <!-- 2020-01-15 09:16:14
    我佛了，实体类 User的列名还是 与数据库db1中user表的列名不一致！
    要手动在 UserDao.xml 中 写 <resultMap />标签了

    2020-01-15 09:49:35
    注意，实体类User的 基本数据类型 改用 包装类了！
    在 UserDao.xml配置文件中，注意 parameterType="包装类全类名"！！
    -->
    <resultMap id="userMap" type="demo04_DynamicSQL.domain.User">
        <!-- 主键的映射 -->
        <id property="userId" column="id" />
        <!-- 非主键的映射 -->
        <result property="userName" column="username" />
        <result property="userAddress" column="address" />
        <result property="userSex" column="sex" />
        <result property="userBirthday" column="birthday" />
    </resultMap>

    <select id="findAll" resultMap="userMap" >
        select * from user;
    </select>

    <select id="findById" parameterType="java.lang.Integer" resultMap="userMap" >
        <!-- 当传入的形参是基本数据类型、或包装类、或字符串String时，这里的#{...}变量名是任意的 -->
        select * from user where id = #{uuuuid};
    </select>

    <select id="findByName" parameterType="java.lang.String" resultMap="userMap" >
        <!-- 当传入的形参是基本数据类型、或包装类、或字符串String时，这里的#{...}变量名是任意的 -->
        select * from user where username like #{uuuuuname};
    </select>

    <select id="findUserByVo" parameterType="demo04_DynamicSQL.domain.QueryVo" resultMap="userMap" >
        <!-- 传入形参是Vo对象时：真正使用的是 vo属性(-user实例对象)的属性(-user实例对象的属性) -->
        select * from user where id = #{user.userId};
    </select>


    <!-- 2020-01-15 10:51:49
    OGNL表达式
    OGNL是 Object Graphic Navigation Language (对象图导航语言) 的缩写
      -支持对象方法调用，如：×××.doSomeSpecial();
      -支持类静态的方法调用和值访问，表达式的格式


    ▲ 什么时候用到<if />标签？
    (1)当 传入的形参parameterType为某个实例对象user时，可用 <if />标签对 实例对象user的属性进行判空操作；

    (2)而当 传入的形参parameterType为 基本数据类型、或包装类、或字符串String型时，不需要用 <if />标签进行判空！
    ——这样 test= "OGNL表达式" 这里就写不出来了……
    因为这里的OGNL表达式就是取 传入的形参parameterType=某个实例对象user中的属性

    <if />标签：
    <if test=" 符合OGNL要求的判断表达式；表达式结果可以是 true 或 false " >
        /* test属性中的 OGNL判断表达式怎么写？
        *  List<E> SqlFactorySession实例对象.selectList( String SQL语句， Object parameter传入的形参  )

        * if标签中，test属性的 OGNL表达式 所获取的值是 你传入形参parameterType 中的属性！
        *
        * 如 传入形参parameterType 为 User实例对象user
        * 则 if标签中，test属性的 OGNL表达式 所获取的值 是User实例对象的 属性名！
        * 如 userName、userAddress
        *
        * 2020-01-15 19:23:28
        * 如果传入的形参是 QueryVo实例对象vo，则 test属性中获取到真正的 userName为：
        * ——vo属性的属性 就是userName
        * 写法：test=" 属性user.属性userName!=null "
        *  */

        * */

        /* 动态拼接SQL语句：利用到了SQL语句中的CONCAT( "字符串1", "字符串2",...  )函数
        SQL语句中的 CONCAT函数：将两个(或多个)字符串直接连接为一个字符串
          -直接将多个字符串粘在一起(无分隔符！)，变成一个字符串
        * */
        and username like CONCAT( '%', #{userName}, '%' ) //多个字符串粘在一起(无分隔符！) %#{userName}%
    </if>
    -->


    <!-- 来了，来了！
    user 查询的条件：有可能有用户名，有可能有性别，也有可能有地址，还有可能是都有
    -->
    <select id="findUserByCondition" parameterType="demo04_DynamicSQL.domain.QueryVo" resultMap="userMap" >
        <!-- select * from user where 1=1 -->

        <!-- 2020-01-15 16:45:07
        Mybatis中，之前拼条件时的写法：where 1=1，现在也可以使用 <where /> 标签
        直接用 <where />标签 包住里面的一堆<if />标签即可，写法：

        <where>
            ...包住里面的一堆<if />标签...
        </where>


        <where />标签 自动识别：只有在一个以上的 if 条件有值的情况下才去插入 “WHERE” 子句；
        而且，若最后的内容是 “AND” 或 “OR” 开头的，<where />标签也知道如何将他们去除。

        再也不用 where 1=1 拼条件啦!
        -->

        select * from user
        <!-- 直接用 <where />标签 包住里面的一堆<if />标签即可 -->
        <where>
            <if test=" userName!=null and userName!='' " >
                and username=#{userName}
            </if>
            <if test=" userSex!=null and userSex!='' " >
                and sex=#{userSex}
            </if>
            <if test=" userAddress!=null and userAddress!='' " >
                and address=#{userAddress}
            </if>
        </where>


    </select>

    <!-- <foreach /> 标签的总结

    /* 2020-01-15 17:16:03
    看懂了 <foreach /> 标签的用法了！
    核心：生成 in字段后面的内容： (value1,value2,value3,…)，然后拼入原本的SQL语句中！
    把 集合list或数组array中的每个元素 都 “一一放进SQL语句 in字段后面的 ()括号中，每个元素都以英文逗号, 分隔开”

    select * from user表 where XXX in (value1,value2,value3,…)  //最好不要用空格隔开！
    <foreach /> 标签，就是生成 in字段后面的内容： (value1,value2,value3,…)
      开头是左括号(
      中间的value是 集合list或数组array中的每个元素
      分隔符是英文逗号,
      结尾是右括号)


    <foreach> 标签有循环的功能，可以用来生成有规律的 SQL 语句，主要属性有：
      1.collection：被迭代的变量的【数据类型】，如 集合list或数组array
         (1)如果传入的是单参数且参数类型是一个 List 的时候，collection 属性值为 list
         (2)如果传入的是单参数且参数类型是一个 array 数组的时候，collection 的属性值为 array

      2.item：在迭代过程中，代表 集合每一个元素的【变量名 或称 别名】，
         用于在 <foreach />标签体中的内容：表示被迭代的元素value！

      3.index：在迭代过程中，代表 每次迭代到的位置 的【变量名】 ——较少用

      ——以下开始拼串环节！
      4.open：表示该语句以什么开始：开头是左括号(
      5.separator：表示每次迭代之间以什么符号作为分隔符：中间的value是 集合list或数组array中的每个元素
      6.close：表示该语句以什么结束：结尾是右括号)

     示例：
     <select id="selectPostIn" resultType="domain.blog.Post">
        SELECT * FROM POST P WHERE ID in
        <foreach
              collection="list"
              item="item别名"
              index="index"

              open="("
              separator=","
              close=")"   >

            // 别名，用在<foreach />标签体中的内容：表示被迭代的元素value！
            #{item}

        <//foreach>  //为了复制进xml中的注释，我在结束标签这里搞了两条斜杠//
    <//select>

    *  */

    -->
    <select id="findUserInIds" parameterType="demo04_DynamicSQL.domain.QueryVo" resultMap="userMap" >
        select * from user where id in
        <!-- 2020-01-15 17:27:27
        1.collection属性的值 是 【传入形参parameterType中的属性A，该属性A必需为list集合或array数组】
        如 传入形参parameterType为 QueryVo实例对象
        需要被迭代的集合是 QueryVo实例对象中的 属性 【集合ids】
        所以，collection="ids" 而不是 collection="list" ！！
        所以，若写成 collection="idsdfasdjf"，会报错：
        There is no getter for property named 'idsdfasdjf' in 'class demo04_DynamicSQL.domain.QueryVo'

        2.item="XXXXXXXX" 说明 表示被迭代的元素value的别名是可任意的
        -->
        <foreach collection="ids" item="XXXXXXXX" index="index"   open="("  separator=","  close=")" >
            #{XXXXXXXX}
        </foreach>
    </select>





</mapper>

