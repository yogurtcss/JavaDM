<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">


    <!-- 2020-01-24 12:37:46  更改此 bean.xml 的约束：
    在收藏的帮助文档index.html中：Core -> Ctrl+F 搜索 xmlns:aop，
    就复制这一段 xml约束进来
    -->

    <!-- 2020-01-24 12:33:06
    Spring中的AOC配置
    -->

    <!--spring中基于XML的AOP配置步骤
        1、把通知Bean也交给spring来管理
        2、使用aop:config标签表明开始AOP的配置
        3、使用aop:aspect标签表明配置切面
                id属性：是给切面提供一个唯一标识
                ref属性：是指定通知类bean的Id。
        4、在aop:aspect标签的内部使用对应标签来配置通知的类型
               我们现在示例是让printLog方法在切入点方法执行之前之前：所以是前置通知
               aop:before：表示配置前置通知
                    method属性：用于指定Logger类中哪个方法是前置通知
                    pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强

            切入点表达式的写法：
                关键字：execution(表达式)
                表达式：
                    访问修饰符  返回值  包名.包名.包名...类名.方法名(参数列表)
                标准的表达式写法：
                    public void com.itheima.service.impl.AccountServiceImpl.saveAccount()
                访问修饰符可以省略
                    void com.itheima.service.impl.AccountServiceImpl.saveAccount()
                返回值可以使用通配符，表示任意返回值
                    * com.itheima.service.impl.AccountServiceImpl.saveAccount()
                包名可以使用通配符，表示任意包。但是有几级包，就需要写几个*.
                    * *.*.*.*.AccountServiceImpl.saveAccount())
                包名可以使用..表示当前包及其子包
                    * *..AccountServiceImpl.saveAccount()
                类名和方法名都可以使用*来实现通配
                    * *..*.*()
                参数列表：
                    可以直接写数据类型：
                        基本类型直接写名称           int
                        引用类型写包名.类名的方式   java.lang.String
                    可以使用通配符表示任意类型，但是必须有参数
                    可以使用..表示有无参数均可，有参数可以是任意类型
                全通配写法：
                    * *..*.*(..)

                实际开发中切入点表达式的通常写法：
                    切到业务层实现类下的所有方法
                        * com.itheima.service.impl.*.*(..)
    -->
    <!-- 配置srping的Ioc,把service对象配置进来 -->
    <bean id="accountService" class="demo4_springAOP1.service.impl.AccountServiceImpl" />
    <!-- 配置Logger类 -->
    <bean id="logger" class="demo4_springAOP1.utils.Logger" />
    <!-- 配置AOP -->
    <aop:config>  <!-- aop:config标签表明开始AOP的配置 -->
        <!-- 2020-01-24 16:06:22   配置切入点表达式  aop:pointcut标签
         id属性用于指定表达式的唯一标识
         expression属性用于指定表达式内容
         aop:pointcut标签写在aop:aspect标签内部只能当前切面使用，
         它还可以写在aop:aspect外面，此时就变成了所有切面可用；

         切面中的通知 如aop:before 要引用此切面表达式pt1时，写法为 pointcut-ref属性="pt1"
        -->
        <!-- 外部定义了一个aop:pointcut标签，id名为 pt1 -->
        <aop:pointcut id="pt1" expression="execution( * demo4_springAOP1.service.impl.*.*(..) )" />

        <aop:aspect id="logAdvice" ref="logger"> <!-- aop:aspect标签表明配置切面 -->
            <!-- id属性：是给切面提供一个唯一标识
            ref属性：是指定【通知类】bean的Id。 -->

            <!-- 现在示例：Logger类中的printLog()方法在切入点方法执行之前执行：
            所以是前置通知

            aop:before：表示配置前置通知
              - method属性：用于指定Logger类中哪个方法是前置通知
              - pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强

            切入点表达式的写法： execution(表达式)
            括号中的表达式：访问修饰符   返回值   包名.包名.包名...类名.方法名(参数列表)
            如：             public     void   demo4_springAOP1.service.AccountServiceImpl.saveAccount()
            //其中：
            访问修饰符可以直接省略，但不能用通配符* ！！
            返回值可以用通配符 *  表示任意返回值
            包名可以用通配符 * 表示任意的包。但是有几级包，就需要写几个*.

            参数列表：可以直接写数据类型：
               1.基本类型直接写名称           int
               2.引用类型写包名.类名的方式   java.lang.String
               3.可以使用通配符表示任意类型，但是必须有参数
               4.可以使用..表示有无参数均可，有参数可以是任意类型

            -->
            <!-- 配置通知的类型，并且建立通知方法和切入点方法的关联
            符合我条件的才被增强！在这里我规定的增强方法是：传入形参是int型的
            而 saveAccount()和deleteAccount() 都是空参
            updateAccount(int i) 传入形参是int型的，
            所以，updateAccount() 被增强了

            实际开发中：切到业务层实现类下的所有方法
             * com.itheima.service.impl.*.*(..)
            -->
            <!--
            <aop:before method="printLog" pointcut="execution( * demo4_springAOP1.service.impl.*.*(int) )" />
            -->
            <!-- method属性：用于指定Logger类中哪个方法是前置通知
            pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强
            -->

            <!-- 2020-01-24 16:06:22 配置切入点表达式
            id属性用于指定表达式的唯一标识。expression属性用于指定表达式内容
            此标签写在aop:aspect标签内部只能当前切面使用。
            它还可以写在aop:aspect外面，此时就变成了所有切面可用
            -->


            <!-- 外部定义了一个aop:pointcut标签，id名为 pt1
            切面中的通知 如aop:before 要引用此切面表达式pt1时，写法为 pointcut-ref属性="pt1"
            -->
            <aop:before method="printLog" pointcut-ref="pt1" />
            <aop:around method="aroundPrintLog" pointcut-ref="pt1" />
        </aop:aspect>
    </aop:config>

</beans>