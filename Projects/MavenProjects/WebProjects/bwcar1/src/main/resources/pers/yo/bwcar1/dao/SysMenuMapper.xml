<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="pers.yo.bwcar1.dao.SysMenuMapper" >
  <resultMap id="BaseResultMap" type="pers.yo.bwcar1.pojo.SysMenu" >
    <id column="menu_id" property="menuId" jdbcType="BIGINT" />
    <result column="parent_id" property="parentId" jdbcType="BIGINT" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <!-- 增加name的别名 parentName，注意也要在SysMenu的pojo类中加这个字段！！
    并为此属性生成getter、setter方法！
    -->
    <result column="parentName" property="parentName" jdbcType="VARCHAR" />

    <result column="url" property="url" jdbcType="VARCHAR" />
    <result column="perms" property="perms" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="icon" property="icon" jdbcType="VARCHAR" />
    <result column="order_num" property="orderNum" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    menu_id, parent_id, name, url, perms, type, icon, order_num
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="pers.yo.bwcar1.pojo.SysMenuExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from sys_menu
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from sys_menu
    where menu_id = #{menuId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from sys_menu
    where menu_id = #{menuId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="pers.yo.bwcar1.pojo.SysMenuExample" >
    delete from sys_menu
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="pers.yo.bwcar1.pojo.SysMenu" >
    insert into sys_menu (menu_id, parent_id, name, 
      url, perms, type, icon, 
      order_num)
    values (#{menuId,jdbcType=BIGINT}, #{parentId,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, 
      #{url,jdbcType=VARCHAR}, #{perms,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER}, #{icon,jdbcType=VARCHAR}, 
      #{orderNum,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="pers.yo.bwcar1.pojo.SysMenu" >
    insert into sys_menu
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="menuId != null" >
        menu_id,
      </if>
      <if test="parentId != null" >
        parent_id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="url != null" >
        url,
      </if>
      <if test="perms != null" >
        perms,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="icon != null" >
        icon,
      </if>
      <if test="orderNum != null" >
        order_num,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="menuId != null" >
        #{menuId,jdbcType=BIGINT},
      </if>
      <if test="parentId != null" >
        #{parentId,jdbcType=BIGINT},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="url != null" >
        #{url,jdbcType=VARCHAR},
      </if>
      <if test="perms != null" >
        #{perms,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
      <if test="icon != null" >
        #{icon,jdbcType=VARCHAR},
      </if>
      <if test="orderNum != null" >
        #{orderNum,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="pers.yo.bwcar1.pojo.SysMenuExample" resultType="java.lang.Integer" >
    select count(*) from sys_menu
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update sys_menu
    <set >
      <if test="record.menuId != null" >
        menu_id = #{record.menuId,jdbcType=BIGINT},
      </if>
      <if test="record.parentId != null" >
        parent_id = #{record.parentId,jdbcType=BIGINT},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.url != null" >
        url = #{record.url,jdbcType=VARCHAR},
      </if>
      <if test="record.perms != null" >
        perms = #{record.perms,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.icon != null" >
        icon = #{record.icon,jdbcType=VARCHAR},
      </if>
      <if test="record.orderNum != null" >
        order_num = #{record.orderNum,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update sys_menu
    set menu_id = #{record.menuId,jdbcType=BIGINT},
      parent_id = #{record.parentId,jdbcType=BIGINT},
      name = #{record.name,jdbcType=VARCHAR},
      url = #{record.url,jdbcType=VARCHAR},
      perms = #{record.perms,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=INTEGER},
      icon = #{record.icon,jdbcType=VARCHAR},
      order_num = #{record.orderNum,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="pers.yo.bwcar1.pojo.SysMenu" >
    update sys_menu
    <set >
      <if test="parentId != null" >
        parent_id = #{parentId,jdbcType=BIGINT},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="url != null" >
        url = #{url,jdbcType=VARCHAR},
      </if>
      <if test="perms != null" >
        perms = #{perms,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="icon != null" >
        icon = #{icon,jdbcType=VARCHAR},
      </if>
      <if test="orderNum != null" >
        order_num = #{orderNum,jdbcType=INTEGER},
      </if>
    </set>
    where menu_id = #{menuId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="pers.yo.bwcar1.pojo.SysMenu" >
    update sys_menu
    set parent_id = #{parentId,jdbcType=BIGINT},
      name = #{name,jdbcType=VARCHAR},
      url = #{url,jdbcType=VARCHAR},
      perms = #{perms,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      icon = #{icon,jdbcType=VARCHAR},
      order_num = #{orderNum,jdbcType=INTEGER}
    where menu_id = #{menuId,jdbcType=BIGINT}
  </update>

  <!-- bwcar1的映射配置文件xml中：新增的方法findMenuByPage -->
  <!-- 要到服务层接口 MenuService新增 findMenuByPage方法！ -->
  <select id="findMenuByPage" resultMap="BaseResultMap" parameterType="pers.yo.bwcar1.dto.QueryDTO" >
    <!-- 注意，这个name的别名parentName原本在 BaseResultMap中是不存在的，需在BaseResultMap中手动添加！！ -->
    select biao01.*,  biao02.name as parentName
    from
    sys_menu as biao01 left join
    sys_menu as biao02 on
    biao01.parent_id=biao02.menu_id
    <where>
      <if test=" search!=null and search!='' ">    <!-- searc字段不为null，且search补为空字段！ -->
        <!-- 注意：paramterType传入形参的QueryDTO中，已【提前】设置了属性 search、sort和order 字段！
        在这里就可以用ONGL表达式来取值了，未雨绸缪啊！
        private String order;  //排序顺序，如asc升序、或desc降序
        private String sort;   //排序的字段
            注意到，order和sort都是稳定不变的字符串，【排序时】在OGNL表达式中用${}， 而不是用#{}
        private String search; //模糊搜索的关键字 -->
        and biao01.name like concat('%',#{search},'%')
      </if>
    </where>
    <!-- 2020-02-07 12:27:44
    注意SQL原本的语句！order 段不应该放在<where />中！！
    -->
    <if test=" sort!=null and sort!='' " >
      <!-- #{}和${}的区别
        1. #将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号。如：
        order by #user_id#，如果传入的值是111,那么解析成sql时的值为order by "111",
        如果传入的值是id，则解析成的sql为order by "id".
        ▲ #{}能防止SQL注入。

        2. $将传入的数据直接显示生成在sql中。如：order by $user_id$，
        如果传入的值是111,那么解析成sql时的值为order by user_id,
        如果传入的值是id，则解析成的sql为order by id.

        3.一般能用#的就别用$.
        MyBatis排序时，使用order by 动态参数时需要注意：用${}而不是#{}

        我们只是想直接在sql语句中插入一个不改变的字符串。
        比如：ORDER BY，你可以这样来使用：ORDER BY ${columnName}
        这里MyBatis不会修改或转义字符串。 -->
      <!-- 注意：paramterType传入形参的QueryDTO中，已【提前】设置了属性 search、sort和order 字段！
        在这里就可以用ONGL表达式来取值了，未雨绸缪啊！
        private String order;  //排序顺序，如asc升序、或desc降序
        private String sort;   //排序的字段
          注意到，order和sort都是稳定不变的字符串，【排序时】在OGNL表达式中用${}， 而不是用#{}
        private String search; //模糊搜索的关键字 -->

      order by biao01.${sort} ${order}
      <!-- 举例：order by  XXX字段(某列)   asc升序 -->
    </if>
  </select>
  <!-- 要到服务层接口 MenuService新增 findMenuByPage方法！ -->

  <!-- SysMenuMapper.xml需要到此xml配置文件对应的dao接口中，写这个id值对应的方法！ -->
  <delete id="deleteMenu" parameterType="java.util.List">
    <!--  select * from user表 where XXX in (value1,value2,value3,…)  //最好不要用空格隔开！
    看懂了 <foreach /> 标签的用法了！
    核心：生成 in字段后面的内容： (value1,value2,value3,…)，然后拼入原本的SQL语句中！
    -->
    delete from sys_menu where menu_id in
    <foreach collection="list" item="oneID" open="(" separator="," close=")" >
      #{oneID}
    </foreach>
  </delete>
  <!-- 然后到此xml配置文件对应的dao接口中，写这个id值对应的方法！ -->


  <!-- 2020-02-07 17:38:29 -->
  <select id="findMenu" resultMap="BaseResultMap">
    select * from sys_menu where type!=2
  </select>

  <!-- 2020-02-08 20:19:20
  根据用户id，查询用户的【不重复的】菜单权限perms，
  详细解析看test10_SpringBoot2.sql
  -->
  <select id="findPermsByUserId" parameterType="java.lang.Long" resultType="String" >
    select distinct m.perms
    from
        sys_user as u
        left join (sys_user_role as ur) on u.user_id=ur.user_id
        left join (sys_role_menu as rm) on ur.role_id=rm.role_id
        left join (sys_menu as m)       on rm.menu_id=m.menu_id
    <where>
      u.user_id=#{userId}
    </where>
  </select>

  <!-- 2020-02-10 11:44:00
  根据用户userID，查询此userID对应的一级目录(type=0)
  需要用到的中间表：sys_menu、  sys_role_menu、  sys_user_role
  详细解析看test10_SpringBoot2.sql
  -->
  <select id="findDirMenuByUserId" parameterType="java.lang.Long" resultType="java.util.Map" >
    select distinct m.menu_id as menuId,  parent_id as parentId, m.name as name, type as type, icon as icon
    from
        sys_user_role as ur
        left join (sys_role_menu as rm) on ur.role_id=rm.role_id
        left join (sys_menu as m)       on rm.menu_id=m.menu_id
    <where>
        m.type=0 and ur.user_id=#{userId};
    </where>
  </select>

  <!-- 2020-02-10 12:33:09
  上一个查询的深入：查询此一级目录下的所有子菜单项
  详细解析看test10_SpringBoot2.sql
  -->
  <!--
  注意：reslutType和resultMap都是指定针对【某条SQL语句的返回值】而言的，
		不关乎 【dao接口中的方法返回值】 的事！
		如：这里id为findAll的<select/>标签 指定 resultMap="userMap" ——userMap返回的是User对象，看上面！
		是指这条SQL语句返回值的【映射规则是 userMap】—— userMap返回的是User对象，看上面！

		而dao接口中(与id="findAll"相对应的) findAll()方法 的返回值 【与resultMap="userMap"无关！】
		即：用 List集合装着 【SQL语句的返回值 User】
		即：dao方法中的返回值是 List<User> ！！
		public abstract List<User> findAll(); //查询所有用户
  -->
  <select id="findMenuNotButtonByUserId" parameterType="java.util.Map" resultType="java.util.Map" >
    select distinct m.menu_id as menuId,  m.parent_id as parentId,  m.name as name, m.type as type, m.icon as icon, m.url as url
    from
        sys_user_role as ur
        left join (sys_role_menu as rm) on ur.role_id=rm.role_id
        left join (sys_menu as m)       on rm.menu_id=m.menu_id
        left join (sys_menu as m1)      on m1.parent_id=m.menu_id
    <where>
        m.type=1
        and ur.user_id=#{userId}
        and m.parent_id=#{parentId}
    </where>

  </select>

</mapper>