<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<!-- 2020-01-27 15:25:51
关于 SpringMVC中 jsp页面el表达式全不能用的问题如下：
(1)在 jsp 页面中使用 EL 表达式进行获取得不到数据，而是直接显示表达式的值，如直接显示 ${message}
(2)使用虚拟目录时 ${pageContext.request.contextPath}，不会跳到虚拟目录，
跳转的地址中直接显示  ${pageContext.request.contextPath}！

原因：JSP1.2默认的 EL表达式是关闭的 —— 必须手动打开。<%@page isELIgnored="false" %>
JSP2.0 默认的 EL表达式是打开的！

▲ 采用 JSP1.2 的 web.xml 配置信息为：
    <!DOCTYPE web-app PUBLIC
     "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
     "http://java.sun.com/dtd/web-app_2_3.dtd" >

▲ 在这里，当前这个通过Maven骨架创建的 webapp工程的这个web.xml 采用的是JSP1.2版本！
此web.xml一开头的约束就是 JSP1.2的约束！我佛了！

解决：在需要使用EL表达式的那个jsp页面开头，手动打开EL表达式：<%@page isELIgnored="false" %>
-->


<web-app>
  <display-name>Archetype Created Web Application</display-name>

  <!-- 2020-01-26 20:02:06 -->
  <!-- SpringMVC的核心控制器 -->
  <servlet>
    <servlet-name>dispatcherServlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

    <!-- 配置dispatcherServlet的初始化参数
    读取springmvc的配置文件，创建spring容器
    -->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:xmls/springmvc.xml</param-value>
    </init-param>
    <!-- 配置：标记容器是否在启动的时候就加载这个 servlet
    (1)当值为0 或者大于0 时，表示容器在应用启动时就加载这个 servlet；
    (2)当是一个负数时或者没有指定时，则指示容器在该 servlet 被选择时才加载。
    正数的值越小，启动该 servlet 的优先级越高。-->
    <load-on-startup>1</load-on-startup>
    <!-- 2020-01-27 10:51:42
    load-on-startup标签值设为1的结果：
    1.当启动服务器后：上面那个DispatcherServlet就被自动创建为对象；
    2.同时当DispatcherServlet被创建时，其中的初始化参数init-param也跟着被执行：
    此时初始化参数init-param中的 springmvc.xml也跟着被加载了！！
    由此，springmvc.xml里面的配置全部启用！！
    -->
  </servlet>
  <servlet-mapping>
    <servlet-name>dispatcherServlet</servlet-name>
    <!-- 匹配任意的 url
    所有的请求都会途径、经过 dispatcherServlet ！！
    -->
    <url-pattern>/</url-pattern>
  </servlet-mapping>

  <!-- 2020-01-27 18:00:05
  配置：解决中文乱码的过滤器
  -->
  <filter>
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>

    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern> <!-- 过滤任意路径！ -->
  </filter-mapping>

</web-app>