<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd">
    
    <!-- 开启注解的扫描，希望处理service和dao
    而controller不需要Spring框架去处理
    -->
    <context:component-scan base-package="pers.yo" >
        <!-- 配置哪些注解不被扫描。
        exclude 排除
        stereotype 刻板印象

        -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <!-- 配置数据库连接池c3p0 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" >
        <!-- 注意：里面的属性名有些不太一样 -->
        <property name="driverClass" value="com.mysql.jdbc.Driver" />
        <property name="jdbcUrl" value="jdbc:mysql://localhost:5306/db1" />
        <property name="user" value="root" />
        <property name="password" value="root" />
    </bean>

    <!-- 配置 SqlSessionFactory工厂
    通过工厂来生成SqlSession实例对象，以创建dao接口的代理对象，
    并自动存入IOC容器中
    -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" >
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 配置 mapper所在的包(即 mappers标签) -->
    <bean id="mapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer"  >
        <property name="basePackage" value="pers.yo.dao" />
    </bean>

    <!--配置Spring框架声明式事务管理-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" >
        <property name="dataSource" ref="dataSource" />
    </bean>


    <!-- 配置事务通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes> <!-- 事务通知的属性 -->
            <!--
            <tx:method
               name="通知要寻找的、相匹配的方法名"    //find*  表示以“find”开头的方法名
               //name属性可以使用 * 通配符

               read-only="true" //表示此事务是只读的

               //该属性为 true 指示事务是只读的
               解释：对于只执行查询的事务。应将read-only属性设为 true，
               当 出现了【非查询的操作，如】更新、插入或是删除语句 时
               只读事务就会失败

               isolation="DEFAULT"  设定事务的隔离级别，默认即可
            />
            -->

            <!-- 查询操作，设置为 只读事务 -->
            <tx:method name="find*" read-only="true" />

            <!-- 方法名为任意，且“事务隔离级别”为默认DEFAULT -->
            <tx:method name="*" isolation="DEFAULT"  />
        </tx:attributes>
    </tx:advice>

    <!-- 配置AOP增强：切面编程 -->
    <aop:config>
        <aop:advisor advice-ref="txAdvice" pointcut=" execution(* pers.yo.service.impl.*.*(..)) " />
    </aop:config>

</beans>